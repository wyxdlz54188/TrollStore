name: Build TrollStore on Changes

on:
  push:
    branches: [main, master]
    paths:
      - 'Exploits/**'
      - 'TrollStore/**'
      - 'TrollHelper/**'
      - 'RootHelper/**'
      - 'Makefile'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Find and setup Xcode
        run: |
          # 查找可用的 Xcode 版本
          echo "可用的 Xcode 版本:"
          ls /Applications | grep -i xcode || true
          
          # 设置默认的 Xcode 路径
          if [ -d "/Applications/Xcode.app" ]; then
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          else
            # 尝试查找任何 Xcode 版本
            XCODE_PATH=$(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
            if [ -n "$XCODE_PATH" ]; then
              sudo xcode-select -s "$XCODE_PATH/Contents/Developer"
            else
              echo "错误: 未找到 Xcode"
              exit 1
            fi
          fi
          
          # 接受 Xcode 许可协议
          sudo xcodebuild -license accept
          
          # 显示当前 Xcode 版本
          echo "当前 Xcode 版本:"
          xcodebuild -version

      - name: Install dependencies
        run: |
          # 安装 Homebrew (如果尚未安装)
          if ! command -v brew &> /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          
          # 安装必要工具
          brew install ldid dpkg pkg-config openssl@3
          
          # 设置 openssl 路径
          echo 'export PKG_CONFIG_PATH="/opt/homebrew/opt/openssl@3/lib/pkgconfig"' >> ~/.zprofile
          eval "$(/opt/homebrew/bin/brew shellenv)"
          
          # 安装 pwnify
          if [ -d "Pwnify" ]; then
            cd Pwnify
            make
            sudo cp pwnify /usr/local/bin/
            cd ..
          fi

      - name: Build fastPathSign
        run: |
          echo "构建 fastPathSign..."
          cd Exploits/fastPathSign
          make
          ls -la
          # 将构建产物复制到上级目录，以便后续步骤使用
          cp fastPathSign ../../
          cd ../..

      - name: Build RootHelper
        run: |
          echo "构建 RootHelper..."
          cd RootHelper
          make DEBUG=0
          ls -la
          cd ..

      - name: Build TrollStore
        run: |
          echo "构建 TrollStore..."
          cd TrollStore
          make FINALPACKAGE=1
          ls -la
          cd ..

      - name: Build TrollHelper
        run: |
          echo "构建 TrollHelper..."
          cd TrollHelper
          make FINALPACKAGE=1
          ls -la
          cd ..

      - name: List all build artifacts
        run: |
          echo "构建完成，检查输出文件:"
          echo "=========================================="
          find . -name "*.ipa" -o -name "*.app" -o -name "*.deb" -o -name "*.tar" -o -name "fastPathSign" | head -20
          echo ""
          echo "文件详情:"
          echo "=========================================="
          find . -name "*.ipa" -o -name "*.app" -o -name "*.deb" -o -name "*.tar" -o -name "fastPathSign" -exec ls -la {} \; 2>/dev/null || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TrollStore-Build-Output
          path: |
            *.ipa
            *.deb
            *.tar
            fastPathSign
          if-no-files-found: warn
