name: Build TrollStore on Changes

on:
  push:
    branches: [main, master]
    paths:
      - 'Exploits/**'
      - 'TrollStore/**'
      - 'TrollHelper/**'
      - 'RootHelper/**'
      - 'Makefile'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Find and setup Xcode
        run: |
          # 查找可用的 Xcode 版本
          echo "可用的 Xcode 版本:"
          ls /Applications | grep -i xcode || true
          
          # 设置默认的 Xcode 路径
          if [ -d "/Applications/Xcode.app" ]; then
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          else
            # 尝试查找任何 Xcode 版本
            XCODE_PATH=$(find /Applications -name "Xcode*.app" -maxdepth 1 | head -1)
            if [ -n "$XCODE_PATH" ]; then
              sudo xcode-select -s "$XCODE_PATH/Contents/Developer"
            else
              echo "错误: 未找到 Xcode"
              exit 1
            fi
          fi
          
          # 接受 Xcode 许可协议
          sudo xcodebuild -license accept
          
          # 显示当前 Xcode 版本
          echo "当前 Xcode 版本:"
          xcodebuild -version
          
          # 显示可用的 SDK
          echo "可用的 SDK:"
          xcodebuild -showsdks

      - name: Install Theos
        run: |
          # 安装 Theos 越狱开发框架
          echo "安装 Theos..."
          export THEOS=~/theos
          git clone --recursive https://github.com/theos/theos.git $THEOS
          
          # 设置环境变量
          echo "THEOS=$THEOS" >> $GITHUB_ENV
          echo "PATH=$THEOS/bin:$PATH" >> $GITHUB_ENV
          
          # 验证 Theos 安装
          echo "Theos 安装完成，路径: $THEOS"
          ls -la $THEOS

      - name: Configure Theos for available SDK
        run: |
          # 查找可用的 iOS SDK
          echo "查找可用的 iOS SDK..."
          SDK_PATH=$(find /Applications -name "iPhoneOS*.sdk" -type d | head -1)
          if [ -n "$SDK_PATH" ]; then
            echo "找到 SDK: $SDK_PATH"
            SDK_NAME=$(basename "$SDK_PATH" .sdk)
            echo "SDK 名称: $SDK_NAME"
            
            # 设置 Theos 使用可用的 SDK
            echo "设置 Theos 使用 $SDK_NAME..."
            echo "export THEOS_PLATFORM_SDK=$SDK_NAME" >> $GITHUB_ENV
          else
            echo "警告: 未找到 iOS SDK，可能会构建失败"
          fi

      - name: Install dependencies
        run: |
          # 安装 Homebrew (如果尚未安装)
          if ! command -v brew &> /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
          fi
          
          # 安装必要工具
          brew install ldid dpkg pkg-config openssl@3
          
          # 设置 openssl 路径
          echo 'export PKG_CONFIG_PATH="/opt/homebrew/opt/openssl@3/lib/pkgconfig"' >> $GITHUB_ENV
          
          # 安装 pwnify
          if [ -d "Pwnify" ]; then
            cd Pwnify
            make
            sudo cp pwnify /usr/local/bin/
            cd ..
          fi

      - name: Build fastPathSign
        run: |
          echo "构建 fastPathSign..."
          cd Exploits/fastPathSign
          make
          ls -la
          # 将构建产物复制到上级目录，以便后续步骤使用
          cp fastPathSign ../../
          cd ../..

      - name: Build RootHelper with Theos
        run: |
          echo "构建 RootHelper..."
          cd RootHelper
          # 设置 Theos 环境变量
          export THEOS=~/theos
          export PATH=$THEOS/bin:$PATH
          
          # 如果有可用的 SDK，使用它
          if [ -n "$THEOS_PLATFORM_SDK" ]; then
            echo "使用 SDK: $THEOS_PLATFORM_SDK"
            make DEBUG=0 THEOS_PLATFORM_SDK="$THEOS_PLATFORM_SDK"
          else
            echo "使用默认 SDK"
            make DEBUG=0
          fi
          
          ls -la
          cd ..

      - name: Build TrollStore with Theos
        run: |
          echo "构建 TrollStore..."
          cd TrollStore
          # 设置 Theos 环境变量
          export THEOS=~/theos
          export PATH=$THEOS/bin:$PATH
          
          # 如果有可用的 SDK，使用它
          if [ -n "$THEOS_PLATFORM_SDK" ]; then
            echo "使用 SDK: $THEOS_PLATFORM_SDK"
            make FINALPACKAGE=1 THEOS_PLATFORM_SDK="$THEOS_PLATFORM_SDK"
          else
            echo "使用默认 SDK"
            make FINALPACKAGE=1
          fi
          
          ls -la
          cd ..

      - name: Build TrollHelper with Theos
        run: |
          echo "构建 TrollHelper..."
          cd TrollHelper
          # 设置 Theos 环境变量
          export THEOS=~/theos
          export PATH=$THEOS/bin:$PATH
          
          # 如果有可用的 SDK，使用它
          if [ -n "$THEOS_PLATFORM_SDK" ]; then
            echo "使用 SDK: $THEOS_PLATFORM_SDK"
            make FINALPACKAGE=1 THEOS_PLATFORM_SDK="$THEOS_PLATFORM_SDK"
          else
            echo "使用默认 SDK"
            make FINALPACKAGE=1
          fi
          
          ls -la
          cd ..

      - name: List all build artifacts
        run: |
          echo "构建完成，检查输出文件:"
          echo "=========================================="
          find . -name "*.ipa" -o -name "*.app" -o -name "*.deb" -o -name "*.tar" -o -name "fastPathSign" | head -20
          echo ""
          echo "文件详情:"
          echo "=========================================="
          find . -name "*.ipa" -o -name "*.app" -o -name "*.deb" -o -name "*.tar" -o -name "fastPathSign" -exec ls -la {} \; 2>/dev/null || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TrollStore-Build-Output
          path: |
            *.ipa
            *.deb
            *.tar
            fastPathSign
          if-no-files-found: warn
